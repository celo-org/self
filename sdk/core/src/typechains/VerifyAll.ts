/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener,
  } from "ethers";
  import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod,
  } from "../../common";
  
  export declare namespace IVcAndDiscloseCircuitVerifier {
    export type VcAndDiscloseProofStruct = {
      a: [BigNumberish, BigNumberish];
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
      c: [BigNumberish, BigNumberish];
      pubSignals: BigNumberish[];
    };
  
    export type VcAndDiscloseProofStructOutput = [
      a: [bigint, bigint],
      b: [[bigint, bigint], [bigint, bigint]],
      c: [bigint, bigint],
      pubSignals: bigint[]
    ] & {
      a: [bigint, bigint];
      b: [[bigint, bigint], [bigint, bigint]];
      c: [bigint, bigint];
      pubSignals: bigint[];
    };
  }
  
  export declare namespace IIdentityVerificationHubV1 {
    export type VcAndDiscloseHubProofStruct = {
      olderThanEnabled: boolean;
      olderThan: BigNumberish;
      forbiddenCountriesEnabled: boolean;
      forbiddenCountriesListPacked: BigNumberish;
      ofacEnabled: [boolean, boolean, boolean];
      vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct;
    };
  
    export type VcAndDiscloseHubProofStructOutput = [
      olderThanEnabled: boolean,
      olderThan: bigint,
      forbiddenCountriesEnabled: boolean,
      forbiddenCountriesListPacked: bigint,
      ofacEnabled: [boolean, boolean, boolean],
      vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStructOutput
    ] & {
      olderThanEnabled: boolean;
      olderThan: bigint;
      forbiddenCountriesEnabled: boolean;
      forbiddenCountriesListPacked: bigint;
      ofacEnabled: [boolean, boolean, boolean];
      vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStructOutput;
    };
  
    export type ReadableRevealedDataStruct = {
      issuingState: string;
      name: string[];
      passportNumber: string;
      nationality: string;
      dateOfBirth: string;
      gender: string;
      expiryDate: string;
      olderThan: BigNumberish;
      passportNoOfac: BigNumberish;
      nameAndDobOfac: BigNumberish;
      nameAndYobOfac: BigNumberish;
    };
  
    export type ReadableRevealedDataStructOutput = [
      issuingState: string,
      name: string[],
      passportNumber: string,
      nationality: string,
      dateOfBirth: string,
      gender: string,
      expiryDate: string,
      olderThan: bigint,
      passportNoOfac: bigint,
      nameAndDobOfac: bigint,
      nameAndYobOfac: bigint
    ] & {
      issuingState: string;
      name: string[];
      passportNumber: string;
      nationality: string;
      dateOfBirth: string;
      gender: string;
      expiryDate: string;
      olderThan: bigint;
      passportNoOfac: bigint;
      nameAndDobOfac: bigint;
      nameAndYobOfac: bigint;
    };
  }
  
  export interface VerifyAllInterface extends Interface {
    getFunction(
      nameOrSignature:
        | "owner"
        | "renounceOwnership"
        | "setHub"
        | "setRegistry"
        | "transferOwnership"
        | "verifyAll"
    ): FunctionFragment;
  
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "setHub", values: [AddressLike]): string;
    encodeFunctionData(
      functionFragment: "setRegistry",
      values: [AddressLike]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [AddressLike]
    ): string;
    encodeFunctionData(
      functionFragment: "verifyAll",
      values: [
        BigNumberish,
        IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct,
        BigNumberish[]
      ]
    ): string;
  
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setHub", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "setRegistry",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "verifyAll", data: BytesLike): Result;
  }
  
  export namespace OwnershipTransferredEvent {
    export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    export type OutputTuple = [previousOwner: string, newOwner: string];
    export interface OutputObject {
      previousOwner: string;
      newOwner: string;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
  }
  
  export interface VerifyAll extends BaseContract {
    connect(runner?: ContractRunner | null): VerifyAll;
    waitForDeployment(): Promise<this>;
  
    interface: VerifyAllInterface;
  
    queryFilter<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
  
    on<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    once<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    listeners<TCEvent extends TypedContractEvent>(
      event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
      event?: TCEvent
    ): Promise<this>;
  
    owner: TypedContractMethod<[], [string], "view">;
  
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
  
    setHub: TypedContractMethod<[hub: AddressLike], [void], "nonpayable">;
  
    setRegistry: TypedContractMethod<
      [registry: AddressLike],
      [void],
      "nonpayable"
    >;
  
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike],
      [void],
      "nonpayable"
    >;
  
    verifyAll: TypedContractMethod<
      [
        targetRootTimestamp: BigNumberish,
        proof: IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct,
        types: BigNumberish[]
      ],
      [[IIdentityVerificationHubV1.ReadableRevealedDataStructOutput, boolean]],
      "view"
    >;
  
    getFunction<T extends ContractMethod = ContractMethod>(
      key: string | FunctionFragment
    ): T;
  
    getFunction(
      nameOrSignature: "owner"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
      nameOrSignature: "renounceOwnership"
    ): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(
      nameOrSignature: "setHub"
    ): TypedContractMethod<[hub: AddressLike], [void], "nonpayable">;
    getFunction(
      nameOrSignature: "setRegistry"
    ): TypedContractMethod<[registry: AddressLike], [void], "nonpayable">;
    getFunction(
      nameOrSignature: "transferOwnership"
    ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(
      nameOrSignature: "verifyAll"
    ): TypedContractMethod<
      [
        targetRootTimestamp: BigNumberish,
        proof: IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct,
        types: BigNumberish[]
      ],
      [[IIdentityVerificationHubV1.ReadableRevealedDataStructOutput, boolean]],
      "view"
    >;
  
    getEvent(
      key: "OwnershipTransferred"
    ): TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  
    filters: {
      "OwnershipTransferred(address,address)": TypedContractEvent<
        OwnershipTransferredEvent.InputTuple,
        OwnershipTransferredEvent.OutputTuple,
        OwnershipTransferredEvent.OutputObject
      >;
      OwnershipTransferred: TypedContractEvent<
        OwnershipTransferredEvent.InputTuple,
        OwnershipTransferredEvent.OutputTuple,
        OwnershipTransferredEvent.OutputObject
      >;
    };
  }
  