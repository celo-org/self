/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1,
  Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1Interface,
} from "../../../../../contracts/verifiers/local/register/Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "_pA",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "_pB",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "_pC",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[3]",
        name: "_pubSignals",
        type: "uint256[3]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506106468061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806311479fea14610030575b600080fd5b61004a600480360381019061004591906105be565b610060565b6040516100579190610626565b60405180910390f35b6000610076678e46d69ea5b3103c60c01b6105a0565b61008a67cdbdae77d54d89dd60c01b6105a0565b610555565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181106100c0576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100f6576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080610127576000805260206000f35b5050505050565b600060808601600087017f2d5d848d1d8d9230e056a381f90f92fcc6e9da29c6f64ebf484649a7f81302c581527f09dfc2f615c5f42345fcdec5f43096fdb312fc8d974ee034af3b0f6249a86e4360208201526101d160008801357f01d26a1e4913af4513a10afc17ca61e650d56d77e3f4b5e257e337c56b54d12d7f1b2f75676132d6297b752d9605c34cf4f7093d43bb983387eced3d99c0a056d0846100c3565b61022160208801357f1fc6549341c56ce8463ce9ec2d0ad03eb790dd0377d7cae77b6954f2c606354f7f229d46aa93f258ef2bcc2686766ef6a37591a38b41600ff52354dd459352de81846100c3565b61027160408801357f215cc0205a226b19806415f9e0dfc91b9f26bca2d7da5886104052b2caf0a7e07f057eab791accb189cdb3e7a36ac36f1f021ab3e7aa7b134f1b9d2da913d68939846100c3565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f2e01028fa7fd90d5cf0a2aa16f0863b37b9edad12237a0d0722109df1c1cd1c86102808201527f1d8c30ee9d661b66e63febe6f059532989cc2e1438552e200c5c244379f6d97a6102a08201527f1d0355f150db52edf853dde2d8b9913923f97beef5458291f2993ff654b835766102c08201527f048b49c492db450420d548f554484af73b4947b56edaf79835588ac5d764ca886102e08201526020816103008360086107d05a03fa815181169250505095945050505050565b604051610380810160405261056d600084013561008f565b61057a602084013561008f565b610587604084013561008f565b610594818486888a61012e565b90508060005260206000f35b50565b6000819050826040830111156105b857600080fd5b92915050565b60008060008061016085870312156105d557600080fd5b6105df86866105a3565b935060c08501868111156105f257600080fd5b60408601935061060287826105a3565b925050856101608601111561061657600080fd5b6101008501905092959194509250565b600060208201905082151582529291505056fea164736f6c634300081c000a";

type Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1__factory extends ContractFactory {
  constructor(
    ...args: Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1ConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1__factory {
    return super.connect(
      runner
    ) as Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1Interface {
    return new Interface(
      _abi
    ) as Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1 {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Verifier_register_sha256_sha256_sha256_ecdsa_secp256r1;
  }
}
