/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  PassportAirdropRoot,
  PassportAirdropRootInterface,
} from "../../../contracts/abstract/PassportAirdropRoot";

const _abi = [
  {
    inputs: [],
    name: "InvalidAttestationId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidScope",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTimestamp",
    type: "error",
  },
  {
    inputs: [],
    name: "RegisteredNullifier",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "registeredUserIdentifier",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nullifier",
        type: "uint256",
      },
    ],
    name: "UserIdentifierRegistered",
    type: "event",
  },
] as const;

export class PassportAirdropRoot__factory {
  static readonly abi = _abi;
  static createInterface(): PassportAirdropRootInterface {
    return new Interface(_abi) as PassportAirdropRootInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PassportAirdropRoot {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as PassportAirdropRoot;
  }
}
