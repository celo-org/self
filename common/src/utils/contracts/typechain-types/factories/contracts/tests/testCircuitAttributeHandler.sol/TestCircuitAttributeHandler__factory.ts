/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TestCircuitAttributeHandler,
  TestCircuitAttributeHandlerInterface,
} from "../../../../contracts/tests/testCircuitAttributeHandler.sol/TestCircuitAttributeHandler";

const _abi = [
  {
    inputs: [],
    name: "INSUFFICIENT_CHARCODE_LEN",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAsciiCode",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDateLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testCompareOfac",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "olderThan",
        type: "uint256",
      },
    ],
    name: "testCompareOlderThan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "testExtractStringAttribute",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetDateOfBirth",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetExpiryDate",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetGender",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetIssuingState",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetName",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetNationality",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetOfac",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetOlderThan",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "charcodes",
        type: "bytes",
      },
    ],
    name: "testGetPassportNumber",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50611bcc8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c4ddba4111610071578063c4ddba41146101d9578063c74e6a4d14610209578063e1a12b8514610239578063efee52bd14610269578063f202deeb14610299578063f2c1ee8e146102c9576100b4565b806313320790146100b9578063623a19f7146100e9578063822c33f81461011957806384783a3f146101495780638a8b991e14610179578063c2c8fba7146101a9575b600080fd5b6100d360048036038101906100ce9190611819565b6102f9565b6040516100e091906118af565b60405180910390f35b61010360048036038101906100fe9190611819565b610347565b60405161011091906118ca565b60405180910390f35b610133600480360381019061012e9190611819565b610395565b60405161014091906118af565b60405180910390f35b610163600480360381019061015e91906118dd565b6103e3565b60405161017091906118af565b60405180910390f35b610193600480360381019061018e9190611819565b610435565b6040516101a09190611939565b60405180910390f35b6101c360048036038101906101be9190611819565b610483565b6040516101d091906118af565b60405180910390f35b6101f360048036038101906101ee9190611819565b6104d1565b60405161020091906118af565b60405180910390f35b610223600480360381019061021e9190611819565b61051f565b604051610230919061194a565b60405180910390f35b610253600480360381019061024e9190611819565b61056d565b60405161026091906118af565b60405180910390f35b610283600480360381019061027e91906119b5565b6105bb565b60405161029091906118ca565b60405180910390f35b6102b360048036038101906102ae9190611819565b61060b565b6040516102c091906118af565b60405180910390f35b6102e360048036038101906102de9190611819565b610659565b6040516102f09190611939565b60405180910390f35b606061030f67ca2f15a03e22908c60c01b6106a7565b6103236726f190156c23268460c01b6106a7565b6103376757fde58a0e1c1dc860c01b6106a7565b610340826106aa565b9050919050565b600061035d670eedb51d103db86660c01b6106a7565b61037167262c096be900428660c01b6106a7565b61038567182f4445591d9f9560c01b6106a7565b61038e826106fc565b9050919050565b60606103ab67e77b2a367e3a88a760c01b6106a7565b6103bf67d255f8d104ddf05f60c01b6106a7565b6103d367e60d911aca24c51a60c01b6106a7565b6103dc8261074d565b9050919050565b60606103f9672cd36fba94a0445660c01b6106a7565b61040d675f952faf09bf9de960c01b6106a7565b61042167b18feeb0c1fdf2d260c01b6106a7565b61042c8484846107a7565b90509392505050565b600061044b67a91e83d5c1680cc160c01b6106a7565b61045f6766eeb6cd044cd27e60c01b6106a7565b610473678c7129aa763066c260c01b6106a7565b61047c826109e6565b9050919050565b6060610499672c303aba43533d2060c01b6106a7565b6104ad67e1940a5f7c2b1ed060c01b6106a7565b6104c1675754ad82a5a5d7a360c01b6106a7565b6104ca82610aa7565b9050919050565b60606104e767a5954348e62f1c9160c01b6106a7565b6104fb674ea1636d37433e6960c01b6106a7565b61050f67abc2bef77dc839f460c01b6106a7565b61051882610af9565b9050919050565b6060610535671938b28d3e1502ba60c01b6106a7565b610549670c876d88fc9448ee60c01b6106a7565b61055d67e88164150b8d6c7260c01b6106a7565b61056682610b53565b9050919050565b6060610583673324a7b01fce5c4d60c01b6106a7565b610597677869f5ce49a34ec260c01b6106a7565b6105ab67e048bbb1f5c5a5cb60c01b6106a7565b6105b482610bad565b9050919050565b60006105d16735727e9720212d3a60c01b6106a7565b6105e567f54b56daf7859a5e60c01b6106a7565b6105f9675765a367c3d3858460c01b6106a7565b6106038383610bfe565b905092915050565b606061062167a8f5ebcc606e221c60c01b6106a7565b610635679a1bb1ce154e589b60c01b6106a7565b61064967bdaa30fa2d00f25b60c01b6106a7565b61065282610c50565b9050919050565b600061066f678d5c6b00fa31c06260c01b6106a7565b61068367c474af0dfaf2971b60c01b6106a7565b61069767aa51da2c4f50e1c960c01b6106a7565b6106a082610ca2565b9050919050565b50565b60606106c067217e3b2a4a6d855860c01b610d0c565b6106d46795b54d685bd8c3ca60c01b610d0c565b6106e867a5f46e9a74d63b2b60c01b610d0c565b6106f582600260046107a7565b9050919050565b600061071267b7d36f4e42aab37360c01b610d0c565b610726671d2f1e369a0a815f60c01b610d0c565b61073a670ca154d266a5b38f60c01b610d0c565b600161074583610ca2565b149050919050565b606061076367f6b122c4eff3600760c01b610d0c565b6107776759728dab138abddf60c01b610d0c565b61078b674a78f3e4eb25210160c01b610d0c565b6107a061079b836039603e6107a7565b610d0f565b9050919050565b60606107bd67b00932d9359174cf60c01b610d0c565b6107d167e23771a5ea38203060c01b610d0c565b6107e567e735418538f6533b60c01b610d0c565b818451116108475761080167d772dab58e6aefe360c01b610d0c565b61081567e0122fb49e68157360c01b610d0c565b6040517ffe9a439f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085b67fdfecbcaed5ac59260c01b610d0c565b61086f6795ac8500de95825860c01b610d0c565b61088367a217e154bb48ca8960c01b610d0c565b6000600184846108939190611a18565b61089d9190611a36565b67ffffffffffffffff8111156108b6576108b561176e565b5b6040519080825280601f01601f1916602001820160405280156108e85781602001600182028036833780820191505090505b5090506108ff676c3f208dc942bec560c01b610d0c565b61091367519b46e93656e8cb60c01b610d0c565b60008490505b8381116109b25761093467f3be6ccae142862060c01b610d0c565b85818151811061094757610946611a54565b5b602001015160f81c60f81b82868361095f9190611a18565b815181106109705761096f611a54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806109aa90611a6a565b915050610919565b506109c767cab7336016d978b060c01b610d0c565b6109db67d88e5073ce061e5f60c01b610d0c565b809150509392505050565b60006109fc6761e60333fe752da360c01b610d0c565b610a1067e7fa47036d4605f460c01b610d0c565b610a246780dd2b587e84778d60c01b610d0c565b610a5d8260016058610a369190611a36565b81518110610a4757610a46611a54565b5b602001015160f81c60f81b60f81c60ff16610ec5565b600a610a8c84605881518110610a7657610a75611a54565b5b602001015160f81c60f81b60f81c60ff16610ec5565b610a969190611a88565b610aa09190611a36565b9050919050565b6060610abd670a0de6a3caa70c3e60c01b610d0c565b610ad167a1946939c60d39be60c01b610d0c565b610ae567d6d6f8ce2dad529460c01b610d0c565b610af282603660386107a7565b9050919050565b6060610b0f677e692e1d7098a7a060c01b610d0c565b610b2367b2b974bd0eeb76e160c01b610d0c565b610b37674bb53c78c7160fc160c01b610d0c565b610b4c610b4783604160466107a7565b610d0f565b9050919050565b6060610b6967bda9c8eb7ab5932160c01b610d0c565b610b7d674a2bfbd05f4dc74f60c01b610d0c565b610b91679e251d4313539fa860c01b610d0c565b610ba6610ba1836005602b6107a7565b610ff9565b9050919050565b6060610bc3675d0c7e5de763ae5660c01b610d0c565b610bd76777ad014cdbace3e360c01b610d0c565b610beb67c4359c8cda2c9f5660c01b610d0c565b610bf7826040806107a7565b9050919050565b6000610c146733f4a66c75ee30dc60c01b610d0c565b610c2867254bb7bbdfd92cee60c01b610d0c565b610c3c6713a59143bdd7e1be60c01b610d0c565b81610c46846109e6565b1015905092915050565b6060610c66679f6ec93b6688d0e960c01b610d0c565b610c7a673ef235c0c62da37560c01b610d0c565b610c8e6725b3fb320016519760c01b610d0c565b610c9b82602c60346107a7565b9050919050565b6000610cb8673740a981e266c9d160c01b610d0c565b610ccc674d1b3a12a8a2390160c01b610d0c565b610ce067e6931d50e85d89e260c01b610d0c565b81605a81518110610cf457610cf3611a54565b5b602001015160f81c60f81b60f81c60ff169050919050565b50565b6060610d2567437d9d470d9eb97060c01b6115a2565b610d3967c21aba8a96950b3460c01b6115a2565b610d4d67d2df5956a51dd69460c01b6115a2565b6006825114610db057610d6a674cd666bcf384e35f60c01b6115a2565b610d7e67b9704398292310e160c01b6115a2565b6040517fb337595300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dc467393aa17e1463b65360c01b6115a2565b610dd867f787807dd9d9fa6b60c01b6115a2565b610dec67a8e8b623a488a23260c01b6115a2565b6000610dfb83600060026115a5565b9050610e11678c3b4b52c2e8806060c01b6115a2565b610e2567d269a5d603bdeb9360c01b6115a2565b6000610e3484600260046115a5565b9050610e4a675ff241e8b9639f4b60c01b6115a2565b610e5e67e080d8914e234eb960c01b6115a2565b6000610e6d85600460066115a5565b9050610e8367fa33a1643fcff57260c01b6115a2565b610e9767ef33ffaa1377968b60c01b6115a2565b808284604051602001610eac93929190611aaa565b6040516020818303038152906040529350505050919050565b6000610edb673c972566951e3a6b60c01b6115a2565b610eef67a14df49e213782e660c01b6115a2565b610f036795d4b2af9c24315b60c01b6115a2565b603082108015610f235750610f226760f64194247e478260c01b611763565b5b80610f4a5750603982118015610f495750610f4867fad36784cb9ec65f60c01b611763565b5b5b15610fa957610f636774e40db6d5dea70d60c01b6115a2565b610f77673290d1bb84ba335e60c01b6115a2565b6040517ff1ebec9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fbd67c9328cb038efef3a60c01b6115a2565b610fd16775994092733d72a460c01b6115a2565b610fe567bfd369c97a9c08cb60c01b6115a2565b603082610ff29190611a18565b9050919050565b606061100f675ad13b61d906ef6e60c01b6115a2565b61102367b7b2905bf4e2996e60c01b6115a2565b6110376745fa75c9dcf64e2f60c01b6115a2565b600082905061105067ce6224aa2e4a7c8f60c01b6115a2565b61106467d4f4a7928de354f260c01b6115a2565b606061107a67cc7346c77637fd5360c01b6115a2565b61108e679e64637ce805f02560c01b6115a2565b60606110a467ccc261b337e9ce6c60c01b6115a2565b6110b867f328a53b55bafe0e60c01b6115a2565b6000600267ffffffffffffffff8111156110d5576110d461176e565b5b60405190808252806020026020018201604052801561110857816020015b60608152602001906001900390816110f35790505b50905061111f679a4cf17653154ff460c01b6115a2565b611133670750c674a23fe51860c01b6115a2565b600061114967acb1bad8a90611e860c01b6115a2565b61115d6724f5e4f6feb205aa60c01b6115a2565b5b8451811080156111cd57507f3c0000000000000000000000000000000000000000000000000000000000000085828151811061119d5761119c611a54565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561124e576111e667a26cbafff05ba90260c01b6115a2565b828582815181106111fa576111f9611a54565b5b602001015160f81c60f81b604051602001611216929190611b4a565b604051602081830303815290604052925061123b677f9667f0c47b715660c01b6115a2565b808061124690611a6a565b91505061115e565b61126267fcc00a7b68eb195d60c01b6115a2565b60028161126f9190611a36565b9050611285675aa72b5101bf018f60c01b6115a2565b61129967a1e0ef0c7da17d6160c01b6115a2565b5b8451811015611505576112b76753f832b4b389ec9460c01b6115a2565b6112cb6751cef83e29f72b9960c01b6115a2565b7f3c000000000000000000000000000000000000000000000000000000000000008582815181106112ff576112fe611a54565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361147457611345673240e82b1845d22360c01b6115a2565b611359672ee878dc4e64bcd560c01b6115a2565b61136d6724c4ea9c1ab7759060c01b6115a2565b845160018261137c9190611a36565b1080156113f357507f3c00000000000000000000000000000000000000000000000000000000000000856001836113b39190611a36565b815181106113c4576113c3611a54565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156114255761140c67f2ab5800afc6174060c01b6115a2565b611420676b7161afb83b4e6460c01b6115a2565b611505565b61143967f9e57b9ff30f97ac60c01b6115a2565b61144d67246162538295fa4d60c01b6115a2565b8360405160200161145e9190611b78565b60405160208183030381529060405293506114de565b6114886763e2550b333b575460c01b6115a2565b61149c67b2aacd69a879e65d60c01b6115a2565b838582815181106114b0576114af611a54565b5b602001015160f81c60f81b6040516020016114cc929190611b4a565b60405160208183030381529060405293505b6114f267c0df0bbcd082795f60c01b6115a2565b80806114fd90611a6a565b91505061129a565b6115196759f77b9a7d38625160c01b6115a2565b838260008151811061152e5761152d611a54565b5b602002602001018190525061154d67deae9e25cc98fdb760c01b6115a2565b828260018151811061156257611561611a54565b5b602002602001018190525061158167941fa338c0a194a460c01b6115a2565b611595677b82f6c4faff1e1c60c01b6115a2565b8195505050505050919050565b50565b60606115bb67c469446f54dfaa2960c01b6115a2565b6115cf67ee0bcac072269e4860c01b6115a2565b6115e367da8b96edb113084f60c01b6115a2565b60008490506115fc673d974b8a68aa831560c01b6115a2565b61161067abe542875d59fdf660c01b6115a2565b6000848461161e9190611a18565b67ffffffffffffffff8111156116375761163661176e565b5b6040519080825280601f01601f1916602001820160405280156116695781602001600182028036833780820191505090505b509050611680671f18c3307bc8b9fb60c01b6115a2565b61169467924021671440e20660c01b6115a2565b60008590505b8481101561172e576116b667f8bd57fe89b47da760c01b6115a2565b8281815181106116c9576116c8611a54565b5b602001015160f81c60f81b8287836116e19190611a18565b815181106116f2576116f1611a54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061169a565b50611743670e1eb9ddafe97f9f60c01b6115a2565b61175767589c706b4988f97960c01b6115a2565b80925050509392505050565b600060019050919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261179557600080fd5b813567ffffffffffffffff8111156117b0576117af61176e565b5b604051601f19603f601f19601f8501160116810181811067ffffffffffffffff821117156117e1576117e061176e565b5b80604052508181528460208386010111156117fb57600080fd5b81602085016020830137600060208383010152809250505092915050565b60006020828403121561182b57600080fd5b813567ffffffffffffffff81111561184257600080fd5b61184e84828501611784565b91505092915050565b60005b8381101561187557808201518184015260208101905061185a565b50600083830152505050565b60008151808452611899816020860160208601611857565b6020601f19601f83011685010191505092915050565b6020815260006118c26020830184611881565b905092915050565b6000602082019050821515825292915050565b6000806000606084860312156118f257600080fd5b833567ffffffffffffffff81111561190957600080fd5b61191586828701611784565b93505060006020850135905080925050600060408501359050809150509250925092565b600060208201905082825292915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b828110156119a757603f1987860301845261198e858351611881565b9450602082019150602084019350600181019050611972565b505050508091505092915050565b600080604083850312156119c857600080fd5b823567ffffffffffffffff8111156119df57600080fd5b6119eb85828601611784565b925050600060208401359050809150509250929050565b634e487b7160e01b600052601160045260246000fd5b6000828203905081811115611a3057611a2f611a02565b5b92915050565b6000828201905080821115611a4e57611a4d611a02565b5b92915050565b634e487b7160e01b600052603260045260246000fd5b600080198203611a7d57611a7c611a02565b5b600182019050919050565b600082820290508181048314821517611aa457611aa3611a02565b5b92915050565b60008451611abc818460208901611857565b80830190507f2d0000000000000000000000000000000000000000000000000000000000000081528451611af7816001840160208901611857565b8082019150507f2d0000000000000000000000000000000000000000000000000000000000000060018201528351611b36816002840160208801611857565b600180828401010192505050949350505050565b60008351611b5c818460208801611857565b808301905060ff60f81b84168152600181019150509392505050565b60008251611b8a818460208701611857565b80830190507f20000000000000000000000000000000000000000000000000000000000000008152600181019150509291505056fea164736f6c634300081c000a";

type TestCircuitAttributeHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCircuitAttributeHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCircuitAttributeHandler__factory extends ContractFactory {
  constructor(...args: TestCircuitAttributeHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestCircuitAttributeHandler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestCircuitAttributeHandler__factory {
    return super.connect(runner) as TestCircuitAttributeHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCircuitAttributeHandlerInterface {
    return new Interface(_abi) as TestCircuitAttributeHandlerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestCircuitAttributeHandler {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestCircuitAttributeHandler;
  }
}
