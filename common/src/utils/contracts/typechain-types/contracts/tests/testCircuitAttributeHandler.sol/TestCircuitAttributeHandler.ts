/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TestCircuitAttributeHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "testCompareOfac"
      | "testCompareOlderThan"
      | "testExtractStringAttribute"
      | "testGetDateOfBirth"
      | "testGetExpiryDate"
      | "testGetGender"
      | "testGetIssuingState"
      | "testGetName"
      | "testGetNationality"
      | "testGetOfac"
      | "testGetOlderThan"
      | "testGetPassportNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "testCompareOfac",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testCompareOlderThan",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testExtractStringAttribute",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetDateOfBirth",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetExpiryDate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetGender",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetIssuingState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetNationality",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetOfac",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetOlderThan",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetPassportNumber",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "testCompareOfac",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCompareOlderThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testExtractStringAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetDateOfBirth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetExpiryDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetGender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetIssuingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetNationality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetOfac",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetOlderThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetPassportNumber",
    data: BytesLike
  ): Result;
}

export interface TestCircuitAttributeHandler extends BaseContract {
  connect(runner?: ContractRunner | null): TestCircuitAttributeHandler;
  waitForDeployment(): Promise<this>;

  interface: TestCircuitAttributeHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  testCompareOfac: TypedContractMethod<
    [charcodes: BytesLike],
    [boolean],
    "view"
  >;

  testCompareOlderThan: TypedContractMethod<
    [charcodes: BytesLike, olderThan: BigNumberish],
    [boolean],
    "view"
  >;

  testExtractStringAttribute: TypedContractMethod<
    [charcodes: BytesLike, start: BigNumberish, end: BigNumberish],
    [string],
    "view"
  >;

  testGetDateOfBirth: TypedContractMethod<
    [charcodes: BytesLike],
    [string],
    "view"
  >;

  testGetExpiryDate: TypedContractMethod<
    [charcodes: BytesLike],
    [string],
    "view"
  >;

  testGetGender: TypedContractMethod<[charcodes: BytesLike], [string], "view">;

  testGetIssuingState: TypedContractMethod<
    [charcodes: BytesLike],
    [string],
    "view"
  >;

  testGetName: TypedContractMethod<[charcodes: BytesLike], [string[]], "view">;

  testGetNationality: TypedContractMethod<
    [charcodes: BytesLike],
    [string],
    "view"
  >;

  testGetOfac: TypedContractMethod<[charcodes: BytesLike], [bigint], "view">;

  testGetOlderThan: TypedContractMethod<
    [charcodes: BytesLike],
    [bigint],
    "view"
  >;

  testGetPassportNumber: TypedContractMethod<
    [charcodes: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "testCompareOfac"
  ): TypedContractMethod<[charcodes: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "testCompareOlderThan"
  ): TypedContractMethod<
    [charcodes: BytesLike, olderThan: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "testExtractStringAttribute"
  ): TypedContractMethod<
    [charcodes: BytesLike, start: BigNumberish, end: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "testGetDateOfBirth"
  ): TypedContractMethod<[charcodes: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "testGetExpiryDate"
  ): TypedContractMethod<[charcodes: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "testGetGender"
  ): TypedContractMethod<[charcodes: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "testGetIssuingState"
  ): TypedContractMethod<[charcodes: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "testGetName"
  ): TypedContractMethod<[charcodes: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "testGetNationality"
  ): TypedContractMethod<[charcodes: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "testGetOfac"
  ): TypedContractMethod<[charcodes: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "testGetOlderThan"
  ): TypedContractMethod<[charcodes: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "testGetPassportNumber"
  ): TypedContractMethod<[charcodes: BytesLike], [string], "view">;

  filters: {};
}
