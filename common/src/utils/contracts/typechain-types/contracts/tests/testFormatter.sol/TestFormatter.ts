/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TestFormatterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "testDateToUnixTimestamp"
      | "testExtractForbiddenCountriesFromPacked"
      | "testFieldElementsToBytes"
      | "testFormatDate"
      | "testFormatName"
      | "testIsLeapYear"
      | "testNumAsciiToUint"
      | "testParseDatePart"
      | "testProofDateToUnixTimestamp"
      | "testSubstring"
      | "testToTimestamp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "testDateToUnixTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testExtractForbiddenCountriesFromPacked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testFieldElementsToBytes",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatDate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testNumAsciiToUint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseDatePart",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "testProofDateToUnixTimestamp",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testSubstring",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testToTimestamp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "testDateToUnixTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testExtractForbiddenCountriesFromPacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFieldElementsToBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsLeapYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testNumAsciiToUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseDatePart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testProofDateToUnixTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSubstring",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testToTimestamp",
    data: BytesLike
  ): Result;
}

export interface TestFormatter extends BaseContract {
  connect(runner?: ContractRunner | null): TestFormatter;
  waitForDeployment(): Promise<this>;

  interface: TestFormatterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  testDateToUnixTimestamp: TypedContractMethod<
    [date: string],
    [bigint],
    "view"
  >;

  testExtractForbiddenCountriesFromPacked: TypedContractMethod<
    [publicSignal: BigNumberish],
    [string[]],
    "view"
  >;

  testFieldElementsToBytes: TypedContractMethod<
    [publicSignals: [BigNumberish, BigNumberish, BigNumberish]],
    [string],
    "view"
  >;

  testFormatDate: TypedContractMethod<[date: string], [string], "view">;

  testFormatName: TypedContractMethod<[input: string], [string[]], "view">;

  testIsLeapYear: TypedContractMethod<[year: BigNumberish], [boolean], "view">;

  testNumAsciiToUint: TypedContractMethod<
    [numAscii: BigNumberish],
    [bigint],
    "view"
  >;

  testParseDatePart: TypedContractMethod<[value: string], [bigint], "view">;

  testProofDateToUnixTimestamp: TypedContractMethod<
    [dateNum: BigNumberish[]],
    [bigint],
    "view"
  >;

  testSubstring: TypedContractMethod<
    [str: string, startIndex: BigNumberish, endIndex: BigNumberish],
    [string],
    "view"
  >;

  testToTimestamp: TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "testDateToUnixTimestamp"
  ): TypedContractMethod<[date: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "testExtractForbiddenCountriesFromPacked"
  ): TypedContractMethod<[publicSignal: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "testFieldElementsToBytes"
  ): TypedContractMethod<
    [publicSignals: [BigNumberish, BigNumberish, BigNumberish]],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "testFormatDate"
  ): TypedContractMethod<[date: string], [string], "view">;
  getFunction(
    nameOrSignature: "testFormatName"
  ): TypedContractMethod<[input: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "testIsLeapYear"
  ): TypedContractMethod<[year: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "testNumAsciiToUint"
  ): TypedContractMethod<[numAscii: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "testParseDatePart"
  ): TypedContractMethod<[value: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "testProofDateToUnixTimestamp"
  ): TypedContractMethod<[dateNum: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "testSubstring"
  ): TypedContractMethod<
    [str: string, startIndex: BigNumberish, endIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "testToTimestamp"
  ): TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
