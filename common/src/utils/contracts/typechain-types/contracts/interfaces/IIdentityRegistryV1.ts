/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IIdentityRegistryV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkCscaRoot"
      | "checkDscKeyCommitmentMerkleRoot"
      | "checkIdentityCommitmentRoot"
      | "checkOfacRoot"
      | "getCscaRoot"
      | "getDscKeyCommitmentIndex"
      | "getDscKeyCommitmentMerkleRoot"
      | "getDscKeyCommitmentTreeSize"
      | "getIdentityCommitmentIndex"
      | "getIdentityCommitmentMerkleRoot"
      | "getIdentityCommitmentMerkleTreeSize"
      | "getOfacRoot"
      | "hub"
      | "isRegisteredDscKeyCommitment"
      | "nullifiers"
      | "registerCommitment"
      | "registerDscKeyCommitment"
      | "rootTimestamps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkCscaRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDscKeyCommitmentMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityCommitmentRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOfacRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCscaRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDscKeyCommitmentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDscKeyCommitmentMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDscKeyCommitmentTreeSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentMerkleTreeSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOfacRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegisteredDscKeyCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCommitment",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDscKeyCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rootTimestamps",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkCscaRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDscKeyCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityCommitmentRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOfacRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCscaRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDscKeyCommitmentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDscKeyCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDscKeyCommitmentTreeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentMerkleTreeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfacRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootTimestamps",
    data: BytesLike
  ): Result;
}

export interface IIdentityRegistryV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IIdentityRegistryV1;
  waitForDeployment(): Promise<this>;

  interface: IIdentityRegistryV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkCscaRoot: TypedContractMethod<[root: BigNumberish], [boolean], "view">;

  checkDscKeyCommitmentMerkleRoot: TypedContractMethod<
    [root: BigNumberish],
    [boolean],
    "view"
  >;

  checkIdentityCommitmentRoot: TypedContractMethod<
    [root: BigNumberish],
    [boolean],
    "view"
  >;

  checkOfacRoot: TypedContractMethod<[root: BigNumberish], [boolean], "view">;

  getCscaRoot: TypedContractMethod<[], [bigint], "view">;

  getDscKeyCommitmentIndex: TypedContractMethod<
    [commitment: BigNumberish],
    [bigint],
    "view"
  >;

  getDscKeyCommitmentMerkleRoot: TypedContractMethod<[], [bigint], "view">;

  getDscKeyCommitmentTreeSize: TypedContractMethod<[], [bigint], "view">;

  getIdentityCommitmentIndex: TypedContractMethod<
    [commitment: BigNumberish],
    [bigint],
    "view"
  >;

  getIdentityCommitmentMerkleRoot: TypedContractMethod<[], [bigint], "view">;

  getIdentityCommitmentMerkleTreeSize: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getOfacRoot: TypedContractMethod<[], [bigint], "view">;

  hub: TypedContractMethod<[], [string], "view">;

  isRegisteredDscKeyCommitment: TypedContractMethod<
    [commitment: BigNumberish],
    [boolean],
    "view"
  >;

  nullifiers: TypedContractMethod<
    [attestationId: BytesLike, nullifier: BigNumberish],
    [boolean],
    "view"
  >;

  registerCommitment: TypedContractMethod<
    [
      attestationId: BytesLike,
      nullifier: BigNumberish,
      commitment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerDscKeyCommitment: TypedContractMethod<
    [dscCommitment: BigNumberish],
    [void],
    "nonpayable"
  >;

  rootTimestamps: TypedContractMethod<[root: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkCscaRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkDscKeyCommitmentMerkleRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkIdentityCommitmentRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkOfacRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCscaRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDscKeyCommitmentIndex"
  ): TypedContractMethod<[commitment: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDscKeyCommitmentMerkleRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDscKeyCommitmentTreeSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityCommitmentIndex"
  ): TypedContractMethod<[commitment: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityCommitmentMerkleRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityCommitmentMerkleTreeSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOfacRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hub"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRegisteredDscKeyCommitment"
  ): TypedContractMethod<[commitment: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<
    [attestationId: BytesLike, nullifier: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerCommitment"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      nullifier: BigNumberish,
      commitment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDscKeyCommitment"
  ): TypedContractMethod<[dscCommitment: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rootTimestamps"
  ): TypedContractMethod<[root: BigNumberish], [bigint], "view">;

  filters: {};
}
