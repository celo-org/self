/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IdentityRegistryImplV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "checkCscaRoot"
      | "checkDscKeyCommitmentMerkleRoot"
      | "checkIdentityCommitmentRoot"
      | "checkOfacRoot"
      | "devAddDscKeyCommitment"
      | "devAddIdentityCommitment"
      | "devChangeDscKeyCommitmentState"
      | "devChangeNullifierState"
      | "devRemoveCommitment"
      | "devRemoveDscKeyCommitment"
      | "devUpdateCommitment"
      | "devUpdateDscKeyCommitment"
      | "getCscaRoot"
      | "getDscKeyCommitmentIndex"
      | "getDscKeyCommitmentMerkleRoot"
      | "getDscKeyCommitmentTreeSize"
      | "getIdentityCommitmentIndex"
      | "getIdentityCommitmentMerkleRoot"
      | "getIdentityCommitmentMerkleTreeSize"
      | "getOfacRoot"
      | "hub"
      | "initialize"
      | "isRegisteredDscKeyCommitment"
      | "nullifiers"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "registerCommitment"
      | "registerDscKeyCommitment"
      | "renounceOwnership"
      | "rootTimestamps"
      | "transferOwnership"
      | "updateCscaRoot"
      | "updateHub"
      | "updateOfacRoot"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitmentRegistered"
      | "CscaRootUpdated"
      | "DevCommitmentRegistered"
      | "DevCommitmentRemoved"
      | "DevCommitmentUpdated"
      | "DevDscKeyCommitmentRegistered"
      | "DevDscKeyCommitmentRemoved"
      | "DevDscKeyCommitmentStateChanged"
      | "DevDscKeyCommitmentUpdated"
      | "DevNullifierStateChanged"
      | "DscKeyCommitmentRegistered"
      | "HubUpdated"
      | "Initialized"
      | "OfacRootUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "RegistryInitialized"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkCscaRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDscKeyCommitmentMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityCommitmentRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOfacRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddDscKeyCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddIdentityCommitment",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devChangeDscKeyCommitmentState",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "devChangeNullifierState",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "devRemoveCommitment",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "devRemoveDscKeyCommitment",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "devUpdateCommitment",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "devUpdateDscKeyCommitment",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCscaRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDscKeyCommitmentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDscKeyCommitmentMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDscKeyCommitmentTreeSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityCommitmentMerkleTreeSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOfacRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredDscKeyCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerCommitment",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDscKeyCommitment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootTimestamps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCscaRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHub",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOfacRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCscaRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDscKeyCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityCommitmentRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOfacRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devAddDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devAddIdentityCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devChangeDscKeyCommitmentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devChangeNullifierState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRemoveCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRemoveDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devUpdateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devUpdateDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCscaRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDscKeyCommitmentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDscKeyCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDscKeyCommitmentTreeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityCommitmentMerkleTreeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfacRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCscaRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOfacRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace CommitmentRegisteredEvent {
  export type InputTuple = [
    attestationId: BytesLike,
    nullifier: BigNumberish,
    commitment: BigNumberish,
    timestamp: BigNumberish,
    imtRoot: BigNumberish,
    imtIndex: BigNumberish
  ];
  export type OutputTuple = [
    attestationId: string,
    nullifier: bigint,
    commitment: bigint,
    timestamp: bigint,
    imtRoot: bigint,
    imtIndex: bigint
  ];
  export interface OutputObject {
    attestationId: string;
    nullifier: bigint;
    commitment: bigint;
    timestamp: bigint;
    imtRoot: bigint;
    imtIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CscaRootUpdatedEvent {
  export type InputTuple = [cscaRoot: BigNumberish];
  export type OutputTuple = [cscaRoot: bigint];
  export interface OutputObject {
    cscaRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevCommitmentRegisteredEvent {
  export type InputTuple = [
    attestationId: BytesLike,
    nullifier: BigNumberish,
    commitment: BigNumberish,
    timestamp: BigNumberish,
    imtRoot: BigNumberish,
    imtIndex: BigNumberish
  ];
  export type OutputTuple = [
    attestationId: string,
    nullifier: bigint,
    commitment: bigint,
    timestamp: bigint,
    imtRoot: bigint,
    imtIndex: bigint
  ];
  export interface OutputObject {
    attestationId: string;
    nullifier: bigint;
    commitment: bigint;
    timestamp: bigint;
    imtRoot: bigint;
    imtIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevCommitmentRemovedEvent {
  export type InputTuple = [
    oldLeaf: BigNumberish,
    imtRoot: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldLeaf: bigint,
    imtRoot: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldLeaf: bigint;
    imtRoot: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevCommitmentUpdatedEvent {
  export type InputTuple = [
    oldLeaf: BigNumberish,
    newLeaf: BigNumberish,
    imtRoot: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldLeaf: bigint,
    newLeaf: bigint,
    imtRoot: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldLeaf: bigint;
    newLeaf: bigint;
    imtRoot: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevDscKeyCommitmentRegisteredEvent {
  export type InputTuple = [
    commitment: BigNumberish,
    imtRoot: BigNumberish,
    imtIndex: BigNumberish
  ];
  export type OutputTuple = [
    commitment: bigint,
    imtRoot: bigint,
    imtIndex: bigint
  ];
  export interface OutputObject {
    commitment: bigint;
    imtRoot: bigint;
    imtIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevDscKeyCommitmentRemovedEvent {
  export type InputTuple = [oldLeaf: BigNumberish, imtRoot: BigNumberish];
  export type OutputTuple = [oldLeaf: bigint, imtRoot: bigint];
  export interface OutputObject {
    oldLeaf: bigint;
    imtRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevDscKeyCommitmentStateChangedEvent {
  export type InputTuple = [commitment: BigNumberish, state: boolean];
  export type OutputTuple = [commitment: bigint, state: boolean];
  export interface OutputObject {
    commitment: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevDscKeyCommitmentUpdatedEvent {
  export type InputTuple = [
    oldLeaf: BigNumberish,
    newLeaf: BigNumberish,
    imtRoot: BigNumberish
  ];
  export type OutputTuple = [oldLeaf: bigint, newLeaf: bigint, imtRoot: bigint];
  export interface OutputObject {
    oldLeaf: bigint;
    newLeaf: bigint;
    imtRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevNullifierStateChangedEvent {
  export type InputTuple = [
    attestationId: BytesLike,
    nullifier: BigNumberish,
    state: boolean
  ];
  export type OutputTuple = [
    attestationId: string,
    nullifier: bigint,
    state: boolean
  ];
  export interface OutputObject {
    attestationId: string;
    nullifier: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DscKeyCommitmentRegisteredEvent {
  export type InputTuple = [
    commitment: BigNumberish,
    timestamp: BigNumberish,
    imtRoot: BigNumberish,
    imtIndex: BigNumberish
  ];
  export type OutputTuple = [
    commitment: bigint,
    timestamp: bigint,
    imtRoot: bigint,
    imtIndex: bigint
  ];
  export interface OutputObject {
    commitment: bigint;
    timestamp: bigint;
    imtRoot: bigint;
    imtIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HubUpdatedEvent {
  export type InputTuple = [hub: AddressLike];
  export type OutputTuple = [hub: string];
  export interface OutputObject {
    hub: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfacRootUpdatedEvent {
  export type InputTuple = [ofacRoot: BigNumberish];
  export type OutputTuple = [ofacRoot: bigint];
  export interface OutputObject {
    ofacRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistryInitializedEvent {
  export type InputTuple = [hub: AddressLike];
  export type OutputTuple = [hub: string];
  export interface OutputObject {
    hub: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdentityRegistryImplV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IdentityRegistryImplV1;
  waitForDeployment(): Promise<this>;

  interface: IdentityRegistryImplV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  checkCscaRoot: TypedContractMethod<[root: BigNumberish], [boolean], "view">;

  checkDscKeyCommitmentMerkleRoot: TypedContractMethod<
    [root: BigNumberish],
    [boolean],
    "view"
  >;

  checkIdentityCommitmentRoot: TypedContractMethod<
    [root: BigNumberish],
    [boolean],
    "view"
  >;

  checkOfacRoot: TypedContractMethod<[root: BigNumberish], [boolean], "view">;

  devAddDscKeyCommitment: TypedContractMethod<
    [dscCommitment: BigNumberish],
    [void],
    "nonpayable"
  >;

  devAddIdentityCommitment: TypedContractMethod<
    [
      attestationId: BytesLike,
      nullifier: BigNumberish,
      commitment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  devChangeDscKeyCommitmentState: TypedContractMethod<
    [dscCommitment: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  devChangeNullifierState: TypedContractMethod<
    [attestationId: BytesLike, nullifier: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  devRemoveCommitment: TypedContractMethod<
    [oldLeaf: BigNumberish, siblingNodes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  devRemoveDscKeyCommitment: TypedContractMethod<
    [oldLeaf: BigNumberish, siblingNodes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  devUpdateCommitment: TypedContractMethod<
    [
      oldLeaf: BigNumberish,
      newLeaf: BigNumberish,
      siblingNodes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  devUpdateDscKeyCommitment: TypedContractMethod<
    [
      oldLeaf: BigNumberish,
      newLeaf: BigNumberish,
      siblingNodes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getCscaRoot: TypedContractMethod<[], [bigint], "view">;

  getDscKeyCommitmentIndex: TypedContractMethod<
    [commitment: BigNumberish],
    [bigint],
    "view"
  >;

  getDscKeyCommitmentMerkleRoot: TypedContractMethod<[], [bigint], "view">;

  getDscKeyCommitmentTreeSize: TypedContractMethod<[], [bigint], "view">;

  getIdentityCommitmentIndex: TypedContractMethod<
    [commitment: BigNumberish],
    [bigint],
    "view"
  >;

  getIdentityCommitmentMerkleRoot: TypedContractMethod<[], [bigint], "view">;

  getIdentityCommitmentMerkleTreeSize: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getOfacRoot: TypedContractMethod<[], [bigint], "view">;

  hub: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[_hub: AddressLike], [void], "nonpayable">;

  isRegisteredDscKeyCommitment: TypedContractMethod<
    [commitment: BigNumberish],
    [boolean],
    "view"
  >;

  nullifiers: TypedContractMethod<
    [attestationId: BytesLike, nullifier: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerCommitment: TypedContractMethod<
    [
      attestationId: BytesLike,
      nullifier: BigNumberish,
      commitment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerDscKeyCommitment: TypedContractMethod<
    [dscCommitment: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rootTimestamps: TypedContractMethod<[root: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCscaRoot: TypedContractMethod<
    [newCscaRoot: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateHub: TypedContractMethod<
    [newHubAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOfacRoot: TypedContractMethod<
    [newOfacRoot: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkCscaRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkDscKeyCommitmentMerkleRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkIdentityCommitmentRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkOfacRoot"
  ): TypedContractMethod<[root: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "devAddDscKeyCommitment"
  ): TypedContractMethod<[dscCommitment: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "devAddIdentityCommitment"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      nullifier: BigNumberish,
      commitment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devChangeDscKeyCommitmentState"
  ): TypedContractMethod<
    [dscCommitment: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devChangeNullifierState"
  ): TypedContractMethod<
    [attestationId: BytesLike, nullifier: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devRemoveCommitment"
  ): TypedContractMethod<
    [oldLeaf: BigNumberish, siblingNodes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devRemoveDscKeyCommitment"
  ): TypedContractMethod<
    [oldLeaf: BigNumberish, siblingNodes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devUpdateCommitment"
  ): TypedContractMethod<
    [
      oldLeaf: BigNumberish,
      newLeaf: BigNumberish,
      siblingNodes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devUpdateDscKeyCommitment"
  ): TypedContractMethod<
    [
      oldLeaf: BigNumberish,
      newLeaf: BigNumberish,
      siblingNodes: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCscaRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDscKeyCommitmentIndex"
  ): TypedContractMethod<[commitment: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDscKeyCommitmentMerkleRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDscKeyCommitmentTreeSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityCommitmentIndex"
  ): TypedContractMethod<[commitment: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityCommitmentMerkleRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIdentityCommitmentMerkleTreeSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOfacRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hub"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_hub: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isRegisteredDscKeyCommitment"
  ): TypedContractMethod<[commitment: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<
    [attestationId: BytesLike, nullifier: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerCommitment"
  ): TypedContractMethod<
    [
      attestationId: BytesLike,
      nullifier: BigNumberish,
      commitment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDscKeyCommitment"
  ): TypedContractMethod<[dscCommitment: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rootTimestamps"
  ): TypedContractMethod<[root: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCscaRoot"
  ): TypedContractMethod<[newCscaRoot: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateHub"
  ): TypedContractMethod<[newHubAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOfacRoot"
  ): TypedContractMethod<[newOfacRoot: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "CommitmentRegistered"
  ): TypedContractEvent<
    CommitmentRegisteredEvent.InputTuple,
    CommitmentRegisteredEvent.OutputTuple,
    CommitmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "CscaRootUpdated"
  ): TypedContractEvent<
    CscaRootUpdatedEvent.InputTuple,
    CscaRootUpdatedEvent.OutputTuple,
    CscaRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DevCommitmentRegistered"
  ): TypedContractEvent<
    DevCommitmentRegisteredEvent.InputTuple,
    DevCommitmentRegisteredEvent.OutputTuple,
    DevCommitmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DevCommitmentRemoved"
  ): TypedContractEvent<
    DevCommitmentRemovedEvent.InputTuple,
    DevCommitmentRemovedEvent.OutputTuple,
    DevCommitmentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DevCommitmentUpdated"
  ): TypedContractEvent<
    DevCommitmentUpdatedEvent.InputTuple,
    DevCommitmentUpdatedEvent.OutputTuple,
    DevCommitmentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DevDscKeyCommitmentRegistered"
  ): TypedContractEvent<
    DevDscKeyCommitmentRegisteredEvent.InputTuple,
    DevDscKeyCommitmentRegisteredEvent.OutputTuple,
    DevDscKeyCommitmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DevDscKeyCommitmentRemoved"
  ): TypedContractEvent<
    DevDscKeyCommitmentRemovedEvent.InputTuple,
    DevDscKeyCommitmentRemovedEvent.OutputTuple,
    DevDscKeyCommitmentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DevDscKeyCommitmentStateChanged"
  ): TypedContractEvent<
    DevDscKeyCommitmentStateChangedEvent.InputTuple,
    DevDscKeyCommitmentStateChangedEvent.OutputTuple,
    DevDscKeyCommitmentStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DevDscKeyCommitmentUpdated"
  ): TypedContractEvent<
    DevDscKeyCommitmentUpdatedEvent.InputTuple,
    DevDscKeyCommitmentUpdatedEvent.OutputTuple,
    DevDscKeyCommitmentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DevNullifierStateChanged"
  ): TypedContractEvent<
    DevNullifierStateChangedEvent.InputTuple,
    DevNullifierStateChangedEvent.OutputTuple,
    DevNullifierStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DscKeyCommitmentRegistered"
  ): TypedContractEvent<
    DscKeyCommitmentRegisteredEvent.InputTuple,
    DscKeyCommitmentRegisteredEvent.OutputTuple,
    DscKeyCommitmentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "HubUpdated"
  ): TypedContractEvent<
    HubUpdatedEvent.InputTuple,
    HubUpdatedEvent.OutputTuple,
    HubUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OfacRootUpdated"
  ): TypedContractEvent<
    OfacRootUpdatedEvent.InputTuple,
    OfacRootUpdatedEvent.OutputTuple,
    OfacRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RegistryInitialized"
  ): TypedContractEvent<
    RegistryInitializedEvent.InputTuple,
    RegistryInitializedEvent.OutputTuple,
    RegistryInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "CommitmentRegistered(bytes32,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CommitmentRegisteredEvent.InputTuple,
      CommitmentRegisteredEvent.OutputTuple,
      CommitmentRegisteredEvent.OutputObject
    >;
    CommitmentRegistered: TypedContractEvent<
      CommitmentRegisteredEvent.InputTuple,
      CommitmentRegisteredEvent.OutputTuple,
      CommitmentRegisteredEvent.OutputObject
    >;

    "CscaRootUpdated(uint256)": TypedContractEvent<
      CscaRootUpdatedEvent.InputTuple,
      CscaRootUpdatedEvent.OutputTuple,
      CscaRootUpdatedEvent.OutputObject
    >;
    CscaRootUpdated: TypedContractEvent<
      CscaRootUpdatedEvent.InputTuple,
      CscaRootUpdatedEvent.OutputTuple,
      CscaRootUpdatedEvent.OutputObject
    >;

    "DevCommitmentRegistered(bytes32,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DevCommitmentRegisteredEvent.InputTuple,
      DevCommitmentRegisteredEvent.OutputTuple,
      DevCommitmentRegisteredEvent.OutputObject
    >;
    DevCommitmentRegistered: TypedContractEvent<
      DevCommitmentRegisteredEvent.InputTuple,
      DevCommitmentRegisteredEvent.OutputTuple,
      DevCommitmentRegisteredEvent.OutputObject
    >;

    "DevCommitmentRemoved(uint256,uint256,uint256)": TypedContractEvent<
      DevCommitmentRemovedEvent.InputTuple,
      DevCommitmentRemovedEvent.OutputTuple,
      DevCommitmentRemovedEvent.OutputObject
    >;
    DevCommitmentRemoved: TypedContractEvent<
      DevCommitmentRemovedEvent.InputTuple,
      DevCommitmentRemovedEvent.OutputTuple,
      DevCommitmentRemovedEvent.OutputObject
    >;

    "DevCommitmentUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      DevCommitmentUpdatedEvent.InputTuple,
      DevCommitmentUpdatedEvent.OutputTuple,
      DevCommitmentUpdatedEvent.OutputObject
    >;
    DevCommitmentUpdated: TypedContractEvent<
      DevCommitmentUpdatedEvent.InputTuple,
      DevCommitmentUpdatedEvent.OutputTuple,
      DevCommitmentUpdatedEvent.OutputObject
    >;

    "DevDscKeyCommitmentRegistered(uint256,uint256,uint256)": TypedContractEvent<
      DevDscKeyCommitmentRegisteredEvent.InputTuple,
      DevDscKeyCommitmentRegisteredEvent.OutputTuple,
      DevDscKeyCommitmentRegisteredEvent.OutputObject
    >;
    DevDscKeyCommitmentRegistered: TypedContractEvent<
      DevDscKeyCommitmentRegisteredEvent.InputTuple,
      DevDscKeyCommitmentRegisteredEvent.OutputTuple,
      DevDscKeyCommitmentRegisteredEvent.OutputObject
    >;

    "DevDscKeyCommitmentRemoved(uint256,uint256)": TypedContractEvent<
      DevDscKeyCommitmentRemovedEvent.InputTuple,
      DevDscKeyCommitmentRemovedEvent.OutputTuple,
      DevDscKeyCommitmentRemovedEvent.OutputObject
    >;
    DevDscKeyCommitmentRemoved: TypedContractEvent<
      DevDscKeyCommitmentRemovedEvent.InputTuple,
      DevDscKeyCommitmentRemovedEvent.OutputTuple,
      DevDscKeyCommitmentRemovedEvent.OutputObject
    >;

    "DevDscKeyCommitmentStateChanged(uint256,bool)": TypedContractEvent<
      DevDscKeyCommitmentStateChangedEvent.InputTuple,
      DevDscKeyCommitmentStateChangedEvent.OutputTuple,
      DevDscKeyCommitmentStateChangedEvent.OutputObject
    >;
    DevDscKeyCommitmentStateChanged: TypedContractEvent<
      DevDscKeyCommitmentStateChangedEvent.InputTuple,
      DevDscKeyCommitmentStateChangedEvent.OutputTuple,
      DevDscKeyCommitmentStateChangedEvent.OutputObject
    >;

    "DevDscKeyCommitmentUpdated(uint256,uint256,uint256)": TypedContractEvent<
      DevDscKeyCommitmentUpdatedEvent.InputTuple,
      DevDscKeyCommitmentUpdatedEvent.OutputTuple,
      DevDscKeyCommitmentUpdatedEvent.OutputObject
    >;
    DevDscKeyCommitmentUpdated: TypedContractEvent<
      DevDscKeyCommitmentUpdatedEvent.InputTuple,
      DevDscKeyCommitmentUpdatedEvent.OutputTuple,
      DevDscKeyCommitmentUpdatedEvent.OutputObject
    >;

    "DevNullifierStateChanged(bytes32,uint256,bool)": TypedContractEvent<
      DevNullifierStateChangedEvent.InputTuple,
      DevNullifierStateChangedEvent.OutputTuple,
      DevNullifierStateChangedEvent.OutputObject
    >;
    DevNullifierStateChanged: TypedContractEvent<
      DevNullifierStateChangedEvent.InputTuple,
      DevNullifierStateChangedEvent.OutputTuple,
      DevNullifierStateChangedEvent.OutputObject
    >;

    "DscKeyCommitmentRegistered(uint256,uint256,uint256,uint256)": TypedContractEvent<
      DscKeyCommitmentRegisteredEvent.InputTuple,
      DscKeyCommitmentRegisteredEvent.OutputTuple,
      DscKeyCommitmentRegisteredEvent.OutputObject
    >;
    DscKeyCommitmentRegistered: TypedContractEvent<
      DscKeyCommitmentRegisteredEvent.InputTuple,
      DscKeyCommitmentRegisteredEvent.OutputTuple,
      DscKeyCommitmentRegisteredEvent.OutputObject
    >;

    "HubUpdated(address)": TypedContractEvent<
      HubUpdatedEvent.InputTuple,
      HubUpdatedEvent.OutputTuple,
      HubUpdatedEvent.OutputObject
    >;
    HubUpdated: TypedContractEvent<
      HubUpdatedEvent.InputTuple,
      HubUpdatedEvent.OutputTuple,
      HubUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OfacRootUpdated(uint256)": TypedContractEvent<
      OfacRootUpdatedEvent.InputTuple,
      OfacRootUpdatedEvent.OutputTuple,
      OfacRootUpdatedEvent.OutputObject
    >;
    OfacRootUpdated: TypedContractEvent<
      OfacRootUpdatedEvent.InputTuple,
      OfacRootUpdatedEvent.OutputTuple,
      OfacRootUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RegistryInitialized(address)": TypedContractEvent<
      RegistryInitializedEvent.InputTuple,
      RegistryInitializedEvent.OutputTuple,
      RegistryInitializedEvent.OutputObject
    >;
    RegistryInitialized: TypedContractEvent<
      RegistryInitializedEvent.InputTuple,
      RegistryInitializedEvent.OutputTuple,
      RegistryInitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
