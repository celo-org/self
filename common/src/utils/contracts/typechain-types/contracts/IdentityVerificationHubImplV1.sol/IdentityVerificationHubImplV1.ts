/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IIdentityVerificationHubV1 {
  export type ReadableRevealedDataStruct = {
    issuingState: string;
    name: string[];
    passportNumber: string;
    nationality: string;
    dateOfBirth: string;
    gender: string;
    expiryDate: string;
    olderThan: BigNumberish;
    ofac: BigNumberish;
  };

  export type ReadableRevealedDataStructOutput = [
    issuingState: string,
    name: string[],
    passportNumber: string,
    nationality: string,
    dateOfBirth: string,
    gender: string,
    expiryDate: string,
    olderThan: bigint,
    ofac: bigint
  ] & {
    issuingState: string;
    name: string[];
    passportNumber: string;
    nationality: string;
    dateOfBirth: string;
    gender: string;
    expiryDate: string;
    olderThan: bigint;
    ofac: bigint;
  };

  export type VcAndDiscloseHubProofStruct = {
    olderThanEnabled: boolean;
    olderThan: BigNumberish;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: BigNumberish;
    ofacEnabled: boolean;
    vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct;
  };

  export type VcAndDiscloseHubProofStructOutput = [
    olderThanEnabled: boolean,
    olderThan: bigint,
    forbiddenCountriesEnabled: boolean,
    forbiddenCountriesListPacked: bigint,
    ofacEnabled: boolean,
    vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStructOutput
  ] & {
    olderThanEnabled: boolean;
    olderThan: bigint;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: bigint;
    ofacEnabled: boolean;
    vcAndDiscloseProof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStructOutput;
  };

  export type VcAndDiscloseVerificationResultStruct = {
    attestationId: BigNumberish;
    scope: BigNumberish;
    userIdentifier: BigNumberish;
    nullifier: BigNumberish;
    identityCommitmentRoot: BigNumberish;
    revealedDataPacked: [BigNumberish, BigNumberish, BigNumberish];
    forbiddenCountriesListPacked: BigNumberish;
  };

  export type VcAndDiscloseVerificationResultStructOutput = [
    attestationId: bigint,
    scope: bigint,
    userIdentifier: bigint,
    nullifier: bigint,
    identityCommitmentRoot: bigint,
    revealedDataPacked: [bigint, bigint, bigint],
    forbiddenCountriesListPacked: bigint
  ] & {
    attestationId: bigint;
    scope: bigint;
    userIdentifier: bigint;
    nullifier: bigint;
    identityCommitmentRoot: bigint;
    revealedDataPacked: [bigint, bigint, bigint];
    forbiddenCountriesListPacked: bigint;
  };
}

export declare namespace IDscCircuitVerifier {
  export type DscCircuitProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: [BigNumberish, BigNumberish];
  };

  export type DscCircuitProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: [bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: [bigint, bigint];
  };
}

export declare namespace IRegisterCircuitVerifier {
  export type RegisterCircuitProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: [BigNumberish, BigNumberish, BigNumberish];
  };

  export type RegisterCircuitProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: [bigint, bigint, bigint]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: [bigint, bigint, bigint];
  };
}

export declare namespace IVcAndDiscloseCircuitVerifier {
  export type VcAndDiscloseProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: BigNumberish[];
  };

  export type VcAndDiscloseProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: bigint[]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: bigint[];
  };
}

export interface IdentityVerificationHubImplV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "batchUpdateDscCircuitVerifiers"
      | "batchUpdateRegisterCircuitVerifiers"
      | "getReadableForbiddenCountries"
      | "getReadableRevealedData"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "registerDscKeyCommitment"
      | "registerPassportCommitment"
      | "registry"
      | "renounceOwnership"
      | "sigTypeToDscCircuitVerifiers"
      | "sigTypeToRegisterCircuitVerifiers"
      | "transferOwnership"
      | "updateDscVerifier"
      | "updateRegisterCircuitVerifier"
      | "updateRegistry"
      | "updateVcAndDiscloseCircuit"
      | "upgradeToAndCall"
      | "vcAndDiscloseCircuitVerifier"
      | "verifyVcAndDisclose"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DscCircuitVerifierUpdated"
      | "HubInitialized"
      | "Initialized"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "RegisterCircuitVerifierUpdated"
      | "RegistryUpdated"
      | "Upgraded"
      | "VcAndDiscloseCircuitUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateDscCircuitVerifiers",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateRegisterCircuitVerifiers",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadableForbiddenCountries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadableRevealedData",
    values: [[BigNumberish, BigNumberish, BigNumberish], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerDscKeyCommitment",
    values: [BigNumberish, IDscCircuitVerifier.DscCircuitProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPassportCommitment",
    values: [BigNumberish, IRegisterCircuitVerifier.RegisterCircuitProofStruct]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sigTypeToDscCircuitVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sigTypeToRegisterCircuitVerifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDscVerifier",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegisterCircuitVerifier",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVcAndDiscloseCircuit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vcAndDiscloseCircuitVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVcAndDisclose",
    values: [IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateDscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateRegisterCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReadableForbiddenCountries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReadableRevealedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDscKeyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPassportCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigTypeToDscCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sigTypeToRegisterCircuitVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDscVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegisterCircuitVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVcAndDiscloseCircuit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vcAndDiscloseCircuitVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVcAndDisclose",
    data: BytesLike
  ): Result;
}

export namespace DscCircuitVerifierUpdatedEvent {
  export type InputTuple = [typeId: BigNumberish, verifier: AddressLike];
  export type OutputTuple = [typeId: bigint, verifier: string];
  export interface OutputObject {
    typeId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HubInitializedEvent {
  export type InputTuple = [
    registry: AddressLike,
    vcAndDiscloseCircuitVerifier: AddressLike,
    registerCircuitVerifierIds: BigNumberish[],
    registerCircuitVerifiers: AddressLike[],
    dscCircuitVerifierIds: BigNumberish[],
    dscCircuitVerifiers: AddressLike[]
  ];
  export type OutputTuple = [
    registry: string,
    vcAndDiscloseCircuitVerifier: string,
    registerCircuitVerifierIds: bigint[],
    registerCircuitVerifiers: string[],
    dscCircuitVerifierIds: bigint[],
    dscCircuitVerifiers: string[]
  ];
  export interface OutputObject {
    registry: string;
    vcAndDiscloseCircuitVerifier: string;
    registerCircuitVerifierIds: bigint[];
    registerCircuitVerifiers: string[];
    dscCircuitVerifierIds: bigint[];
    dscCircuitVerifiers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterCircuitVerifierUpdatedEvent {
  export type InputTuple = [typeId: BigNumberish, verifier: AddressLike];
  export type OutputTuple = [typeId: bigint, verifier: string];
  export interface OutputObject {
    typeId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistryUpdatedEvent {
  export type InputTuple = [registry: AddressLike];
  export type OutputTuple = [registry: string];
  export interface OutputObject {
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VcAndDiscloseCircuitUpdatedEvent {
  export type InputTuple = [vcAndDiscloseCircuitVerifier: AddressLike];
  export type OutputTuple = [vcAndDiscloseCircuitVerifier: string];
  export interface OutputObject {
    vcAndDiscloseCircuitVerifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdentityVerificationHubImplV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IdentityVerificationHubImplV1;
  waitForDeployment(): Promise<this>;

  interface: IdentityVerificationHubImplV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  batchUpdateDscCircuitVerifiers: TypedContractMethod<
    [typeIds: BigNumberish[], verifierAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  batchUpdateRegisterCircuitVerifiers: TypedContractMethod<
    [typeIds: BigNumberish[], verifierAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getReadableForbiddenCountries: TypedContractMethod<
    [forbiddenCountriesListPacked: BigNumberish],
    [string[]],
    "view"
  >;

  getReadableRevealedData: TypedContractMethod<
    [
      revealedDataPacked: [BigNumberish, BigNumberish, BigNumberish],
      types: BigNumberish[]
    ],
    [IIdentityVerificationHubV1.ReadableRevealedDataStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      registryAddress: AddressLike,
      vcAndDiscloseCircuitVerifierAddress: AddressLike,
      registerCircuitVerifierIds: BigNumberish[],
      registerCircuitVerifierAddresses: AddressLike[],
      dscCircuitVerifierIds: BigNumberish[],
      dscCircuitVerifierAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registerDscKeyCommitment: TypedContractMethod<
    [
      dscCircuitVerifierId: BigNumberish,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registerPassportCommitment: TypedContractMethod<
    [
      registerCircuitVerifierId: BigNumberish,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sigTypeToDscCircuitVerifiers: TypedContractMethod<
    [typeId: BigNumberish],
    [string],
    "view"
  >;

  sigTypeToRegisterCircuitVerifiers: TypedContractMethod<
    [typeId: BigNumberish],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDscVerifier: TypedContractMethod<
    [typeId: BigNumberish, verifierAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRegisterCircuitVerifier: TypedContractMethod<
    [typeId: BigNumberish, verifierAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRegistry: TypedContractMethod<
    [registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateVcAndDiscloseCircuit: TypedContractMethod<
    [vcAndDiscloseCircuitVerifierAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  vcAndDiscloseCircuitVerifier: TypedContractMethod<[], [string], "view">;

  verifyVcAndDisclose: TypedContractMethod<
    [proof: IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct],
    [IIdentityVerificationHubV1.VcAndDiscloseVerificationResultStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchUpdateDscCircuitVerifiers"
  ): TypedContractMethod<
    [typeIds: BigNumberish[], verifierAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchUpdateRegisterCircuitVerifiers"
  ): TypedContractMethod<
    [typeIds: BigNumberish[], verifierAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReadableForbiddenCountries"
  ): TypedContractMethod<
    [forbiddenCountriesListPacked: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReadableRevealedData"
  ): TypedContractMethod<
    [
      revealedDataPacked: [BigNumberish, BigNumberish, BigNumberish],
      types: BigNumberish[]
    ],
    [IIdentityVerificationHubV1.ReadableRevealedDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      registryAddress: AddressLike,
      vcAndDiscloseCircuitVerifierAddress: AddressLike,
      registerCircuitVerifierIds: BigNumberish[],
      registerCircuitVerifierAddresses: AddressLike[],
      dscCircuitVerifierIds: BigNumberish[],
      dscCircuitVerifierAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerDscKeyCommitment"
  ): TypedContractMethod<
    [
      dscCircuitVerifierId: BigNumberish,
      dscCircuitProof: IDscCircuitVerifier.DscCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPassportCommitment"
  ): TypedContractMethod<
    [
      registerCircuitVerifierId: BigNumberish,
      registerCircuitProof: IRegisterCircuitVerifier.RegisterCircuitProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sigTypeToDscCircuitVerifiers"
  ): TypedContractMethod<[typeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sigTypeToRegisterCircuitVerifiers"
  ): TypedContractMethod<[typeId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDscVerifier"
  ): TypedContractMethod<
    [typeId: BigNumberish, verifierAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRegisterCircuitVerifier"
  ): TypedContractMethod<
    [typeId: BigNumberish, verifierAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRegistry"
  ): TypedContractMethod<[registryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVcAndDiscloseCircuit"
  ): TypedContractMethod<
    [vcAndDiscloseCircuitVerifierAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vcAndDiscloseCircuitVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyVcAndDisclose"
  ): TypedContractMethod<
    [proof: IIdentityVerificationHubV1.VcAndDiscloseHubProofStruct],
    [IIdentityVerificationHubV1.VcAndDiscloseVerificationResultStructOutput],
    "view"
  >;

  getEvent(
    key: "DscCircuitVerifierUpdated"
  ): TypedContractEvent<
    DscCircuitVerifierUpdatedEvent.InputTuple,
    DscCircuitVerifierUpdatedEvent.OutputTuple,
    DscCircuitVerifierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "HubInitialized"
  ): TypedContractEvent<
    HubInitializedEvent.InputTuple,
    HubInitializedEvent.OutputTuple,
    HubInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RegisterCircuitVerifierUpdated"
  ): TypedContractEvent<
    RegisterCircuitVerifierUpdatedEvent.InputTuple,
    RegisterCircuitVerifierUpdatedEvent.OutputTuple,
    RegisterCircuitVerifierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RegistryUpdated"
  ): TypedContractEvent<
    RegistryUpdatedEvent.InputTuple,
    RegistryUpdatedEvent.OutputTuple,
    RegistryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VcAndDiscloseCircuitUpdated"
  ): TypedContractEvent<
    VcAndDiscloseCircuitUpdatedEvent.InputTuple,
    VcAndDiscloseCircuitUpdatedEvent.OutputTuple,
    VcAndDiscloseCircuitUpdatedEvent.OutputObject
  >;

  filters: {
    "DscCircuitVerifierUpdated(uint256,address)": TypedContractEvent<
      DscCircuitVerifierUpdatedEvent.InputTuple,
      DscCircuitVerifierUpdatedEvent.OutputTuple,
      DscCircuitVerifierUpdatedEvent.OutputObject
    >;
    DscCircuitVerifierUpdated: TypedContractEvent<
      DscCircuitVerifierUpdatedEvent.InputTuple,
      DscCircuitVerifierUpdatedEvent.OutputTuple,
      DscCircuitVerifierUpdatedEvent.OutputObject
    >;

    "HubInitialized(address,address,uint256[],address[],uint256[],address[])": TypedContractEvent<
      HubInitializedEvent.InputTuple,
      HubInitializedEvent.OutputTuple,
      HubInitializedEvent.OutputObject
    >;
    HubInitialized: TypedContractEvent<
      HubInitializedEvent.InputTuple,
      HubInitializedEvent.OutputTuple,
      HubInitializedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RegisterCircuitVerifierUpdated(uint256,address)": TypedContractEvent<
      RegisterCircuitVerifierUpdatedEvent.InputTuple,
      RegisterCircuitVerifierUpdatedEvent.OutputTuple,
      RegisterCircuitVerifierUpdatedEvent.OutputObject
    >;
    RegisterCircuitVerifierUpdated: TypedContractEvent<
      RegisterCircuitVerifierUpdatedEvent.InputTuple,
      RegisterCircuitVerifierUpdatedEvent.OutputTuple,
      RegisterCircuitVerifierUpdatedEvent.OutputObject
    >;

    "RegistryUpdated(address)": TypedContractEvent<
      RegistryUpdatedEvent.InputTuple,
      RegistryUpdatedEvent.OutputTuple,
      RegistryUpdatedEvent.OutputObject
    >;
    RegistryUpdated: TypedContractEvent<
      RegistryUpdatedEvent.InputTuple,
      RegistryUpdatedEvent.OutputTuple,
      RegistryUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VcAndDiscloseCircuitUpdated(address)": TypedContractEvent<
      VcAndDiscloseCircuitUpdatedEvent.InputTuple,
      VcAndDiscloseCircuitUpdatedEvent.OutputTuple,
      VcAndDiscloseCircuitUpdatedEvent.OutputObject
    >;
    VcAndDiscloseCircuitUpdated: TypedContractEvent<
      VcAndDiscloseCircuitUpdatedEvent.InputTuple,
      VcAndDiscloseCircuitUpdatedEvent.OutputTuple,
      VcAndDiscloseCircuitUpdatedEvent.OutputObject
    >;
  };
}
