/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPassportAirdropRoot {
  export type VerificationConfigStruct = {
    olderThanEnabled: boolean;
    olderThan: BigNumberish;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: BigNumberish;
    ofacEnabled: boolean;
  };

  export type VerificationConfigStructOutput = [
    olderThanEnabled: boolean,
    olderThan: bigint,
    forbiddenCountriesEnabled: boolean,
    forbiddenCountriesListPacked: bigint,
    ofacEnabled: boolean
  ] & {
    olderThanEnabled: boolean;
    olderThan: bigint;
    forbiddenCountriesEnabled: boolean;
    forbiddenCountriesListPacked: bigint;
    ofacEnabled: boolean;
  };
}

export declare namespace IVcAndDiscloseCircuitVerifier {
  export type VcAndDiscloseProofStruct = {
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
    pubSignals: BigNumberish[];
  };

  export type VcAndDiscloseProofStructOutput = [
    a: [bigint, bigint],
    b: [[bigint, bigint], [bigint, bigint]],
    c: [bigint, bigint],
    pubSignals: bigint[]
  ] & {
    a: [bigint, bigint];
    b: [[bigint, bigint], [bigint, bigint]];
    c: [bigint, bigint];
    pubSignals: bigint[];
  };
}

export interface AirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "claimed"
      | "closeClaim"
      | "closeRegistration"
      | "getAttestationId"
      | "getNullifier"
      | "getScope"
      | "getVerificationConfig"
      | "isClaimOpen"
      | "isRegistered"
      | "isRegistrationOpen"
      | "merkleRoot"
      | "openClaim"
      | "openRegistration"
      | "owner"
      | "registerAddress"
      | "renounceOwnership"
      | "setMerkleRoot"
      | "setVerificationConfig"
      | "token"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimClose"
      | "ClaimOpen"
      | "Claimed"
      | "OwnershipTransferred"
      | "RegistrationClose"
      | "RegistrationOpen"
      | "UserIdentifierRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestationId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getScope", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVerificationConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistrationOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAddress",
    values: [IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationConfig",
    values: [IPassportAirdropRoot.VerificationConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScope", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistrationOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ClaimCloseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimOpenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    index: BigNumberish,
    account: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [index: bigint, account: string, amount: bigint];
  export interface OutputObject {
    index: bigint;
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationCloseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationOpenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserIdentifierRegisteredEvent {
  export type InputTuple = [
    registeredUserIdentifier: BigNumberish,
    nullifier: BigNumberish
  ];
  export type OutputTuple = [
    registeredUserIdentifier: bigint,
    nullifier: bigint
  ];
  export interface OutputObject {
    registeredUserIdentifier: bigint;
    nullifier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Airdrop extends BaseContract {
  connect(runner?: ContractRunner | null): Airdrop;
  waitForDeployment(): Promise<this>;

  interface: AirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish, merkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  claimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  closeClaim: TypedContractMethod<[], [void], "nonpayable">;

  closeRegistration: TypedContractMethod<[], [void], "nonpayable">;

  getAttestationId: TypedContractMethod<[], [bigint], "view">;

  getNullifier: TypedContractMethod<
    [nullifier: BigNumberish],
    [bigint],
    "view"
  >;

  getScope: TypedContractMethod<[], [bigint], "view">;

  getVerificationConfig: TypedContractMethod<
    [],
    [IPassportAirdropRoot.VerificationConfigStructOutput],
    "view"
  >;

  isClaimOpen: TypedContractMethod<[], [boolean], "view">;

  isRegistered: TypedContractMethod<
    [registeredAddress: AddressLike],
    [boolean],
    "view"
  >;

  isRegistrationOpen: TypedContractMethod<[], [boolean], "view">;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  openClaim: TypedContractMethod<[], [void], "nonpayable">;

  openRegistration: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  registerAddress: TypedContractMethod<
    [proof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMerkleRoot: TypedContractMethod<
    [_merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  setVerificationConfig: TypedContractMethod<
    [newVerificationConfig: IPassportAirdropRoot.VerificationConfigStruct],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [index: BigNumberish, amount: BigNumberish, merkleProof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "closeClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAttestationId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNullifier"
  ): TypedContractMethod<[nullifier: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScope"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerificationConfig"
  ): TypedContractMethod<
    [],
    [IPassportAirdropRoot.VerificationConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isClaimOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[registeredAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistrationOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerAddress"
  ): TypedContractMethod<
    [proof: IVcAndDiscloseCircuitVerifier.VcAndDiscloseProofStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMerkleRoot"
  ): TypedContractMethod<[_merkleRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerificationConfig"
  ): TypedContractMethod<
    [newVerificationConfig: IPassportAirdropRoot.VerificationConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ClaimClose"
  ): TypedContractEvent<
    ClaimCloseEvent.InputTuple,
    ClaimCloseEvent.OutputTuple,
    ClaimCloseEvent.OutputObject
  >;
  getEvent(
    key: "ClaimOpen"
  ): TypedContractEvent<
    ClaimOpenEvent.InputTuple,
    ClaimOpenEvent.OutputTuple,
    ClaimOpenEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationClose"
  ): TypedContractEvent<
    RegistrationCloseEvent.InputTuple,
    RegistrationCloseEvent.OutputTuple,
    RegistrationCloseEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationOpen"
  ): TypedContractEvent<
    RegistrationOpenEvent.InputTuple,
    RegistrationOpenEvent.OutputTuple,
    RegistrationOpenEvent.OutputObject
  >;
  getEvent(
    key: "UserIdentifierRegistered"
  ): TypedContractEvent<
    UserIdentifierRegisteredEvent.InputTuple,
    UserIdentifierRegisteredEvent.OutputTuple,
    UserIdentifierRegisteredEvent.OutputObject
  >;

  filters: {
    "ClaimClose()": TypedContractEvent<
      ClaimCloseEvent.InputTuple,
      ClaimCloseEvent.OutputTuple,
      ClaimCloseEvent.OutputObject
    >;
    ClaimClose: TypedContractEvent<
      ClaimCloseEvent.InputTuple,
      ClaimCloseEvent.OutputTuple,
      ClaimCloseEvent.OutputObject
    >;

    "ClaimOpen()": TypedContractEvent<
      ClaimOpenEvent.InputTuple,
      ClaimOpenEvent.OutputTuple,
      ClaimOpenEvent.OutputObject
    >;
    ClaimOpen: TypedContractEvent<
      ClaimOpenEvent.InputTuple,
      ClaimOpenEvent.OutputTuple,
      ClaimOpenEvent.OutputObject
    >;

    "Claimed(uint256,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RegistrationClose()": TypedContractEvent<
      RegistrationCloseEvent.InputTuple,
      RegistrationCloseEvent.OutputTuple,
      RegistrationCloseEvent.OutputObject
    >;
    RegistrationClose: TypedContractEvent<
      RegistrationCloseEvent.InputTuple,
      RegistrationCloseEvent.OutputTuple,
      RegistrationCloseEvent.OutputObject
    >;

    "RegistrationOpen()": TypedContractEvent<
      RegistrationOpenEvent.InputTuple,
      RegistrationOpenEvent.OutputTuple,
      RegistrationOpenEvent.OutputObject
    >;
    RegistrationOpen: TypedContractEvent<
      RegistrationOpenEvent.InputTuple,
      RegistrationOpenEvent.OutputTuple,
      RegistrationOpenEvent.OutputObject
    >;

    "UserIdentifierRegistered(uint256,uint256)": TypedContractEvent<
      UserIdentifierRegisteredEvent.InputTuple,
      UserIdentifierRegisteredEvent.OutputTuple,
      UserIdentifierRegisteredEvent.OutputObject
    >;
    UserIdentifierRegistered: TypedContractEvent<
      UserIdentifierRegisteredEvent.InputTuple,
      UserIdentifierRegisteredEvent.OutputTuple,
      UserIdentifierRegisteredEvent.OutputObject
    >;
  };
}
